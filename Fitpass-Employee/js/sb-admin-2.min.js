!function (l) { "use strict"; l("#sidebarToggle, #sidebarToggleTop").on("click", function (e) { l("body").toggleClass("sidebar-toggled"), l(".sidebar").toggleClass("toggled"), l(".sidebar").hasClass("toggled") && l(".sidebar .collapse").collapse("hide") }), l(window).resize(function () { l(window).width() < 768 && l(".sidebar .collapse").collapse("hide"), l(window).width() < 480 && !l(".sidebar").hasClass("toggled") && (l("body").addClass("sidebar-toggled"), l(".sidebar").addClass("toggled"), l(".sidebar .collapse").collapse("hide")) }), l("body.fixed-nav .sidebar").on("mousewheel DOMMouseScroll wheel", function (e) { var o; 768 < l(window).width() && (o = (o = e.originalEvent).wheelDelta || -o.detail, this.scrollTop += 30 * (o < 0 ? 1 : -1), e.preventDefault()) }), l(document).on("scroll", function () { 100 < l(this).scrollTop() ? l(".scroll-to-top").fadeIn() : l(".scroll-to-top").fadeOut() }), l(document).on("click", "a.scroll-to-top", function (e) { var o = l(this); l("html, body").stop().animate({ scrollTop: l(o.attr("href")).offset().top }, 1e3, "easeInOutExpo"), e.preventDefault() }) }(jQuery);

// --------------------------------------------------------------------------------------------------------------------------------
document.addEventListener("DOMContentLoaded", function () {

    // Function to handle adding a new image
    function addImage() {
        const rowElement = document.querySelector(".row-add");
        const imageInput = document.getElementById("imageInput");

        if (!imageInput._hasChangeEventListener) {
            imageInput._hasChangeEventListener = true;

            imageInput.addEventListener("change", function (event) {
                const file = event.target.files[0];
                console.log("addImage");

                if (file) {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        const newImageContainer = document.createElement("div");
                        newImageContainer.classList.add("col-4");
                        newImageContainer.innerHTML = `
                            <div class="image-container">
                                <img src="${e.target.result}" alt="Image">
                                <button class="remove-image-button">Xóa</button>
                            </div>
                        `;
                        rowElement.appendChild(newImageContainer);

                        // Thêm sự kiện click vào nút "Xóa"
                        const removeButton = newImageContainer.querySelector(".remove-image-button");
                        removeButton.addEventListener("click", function () {
                            removeImage(removeButton);
                        });
                    };
                    reader.readAsDataURL(file);
                }
            });
        }

        imageInput.click();
    }

    // Function to handle removing an image
    function removeImage(button) {
        const imageContainer = button.parentElement;
        imageContainer.parentElement.remove();
    }

    // Function to handle editing an image (replace with a new one)
    function editImage(img) {
        const imageInput = document.getElementById("imageInput");

        function handleImageChange(event) {
            const file = event.target.files[0];
            console.log("changeImage");
            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    img.src = e.target.result;
                    event.target.value = "";
                };
                reader.readAsDataURL(file);
            }
            imageInput.removeEventListener("change", handleImageChange);
        }
        imageInput.addEventListener("change", handleImageChange);
        imageInput.click();
    }

    const editButtons = document.querySelectorAll(".remove-image-button");
    editButtons.forEach((button) => {
        button.addEventListener("click", function () {
            removeImage(button);
        });
    });

    const images = document.querySelectorAll(".image-container img");
    images.forEach((img) => {
        img.addEventListener("click", function () {
            editImage(img);
        });
    });

    const addButton = document.getElementById("addImageButton");
    addButton.addEventListener("click", function () {
        addImage();
    });
});

// jQuery time
var current_fs, next_fs, previous_fs; // fieldsets
var left, opacity, scale; // fieldset properties which we will animate
var animating; // flag to prevent quick multi-click glitches

$(".next").click(function() {
  if (animating) return false;
  animating = true;

  current_fs = $(this).parent();
  next_fs = $(this).parent().next();

  // activate next step on progress bar using the index of next_fs
  $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");

  // show the next fieldset
  next_fs.show();
  // hide the current fieldset with style
  current_fs.animate(
    { opacity: 0 },
    {
      step: function(now, mx) {
        // as the opacity of current_fs reduces to 0 - stored in "now"
        // 1. scale current_fs down to 80%
        scale = 1 - (1 - now) * 0.2;
        // 2. bring next_fs from the right (50%)
        left = (now * 50) + "%";
        // 3. increase opacity of next_fs to 1 as it moves in
        opacity = 1 - now;
        current_fs.css({
          transform: "scale(" + scale + ")",
          position: "absolute",
        });
        next_fs.css({ left: left, opacity: opacity });
      },
      duration: 800,
      complete: function() {
        current_fs.hide();
        animating = false;
      },
      // this comes from the custom easing plugin
      easing: "easeInOutBack",
    }
  );
});

$(".previous").click(function() {
  if (animating) return false;
  animating = true;

  current_fs = $(this).parent();
  previous_fs = $(this).parent().prev();

  // de-activate current step on the progress bar
  $("#progressbar li").eq($("fieldset").index(current_fs)).removeClass("active");

  // show the previous fieldset
  previous_fs.show();
  // hide the current fieldset with style
  current_fs.animate(
    { opacity: 0 },
    {
      step: function(now, mx) {
        // as the opacity of current_fs reduces to 0 - stored in "now"
        // 1. scale previous_fs from 80% to 100%
        scale = 0.8 + (1 - now) * 0.2;
        // 2. take current_fs to the right (50%) - from 0%
        left = ((1 - now) * 50) + "%";
        // 3. increase opacity of previous_fs to 1 as it moves in
        opacity = 1 - now;
        current_fs.css({ left: left });
        previous_fs.css({ transform: "scale(" + scale + ")", opacity: opacity });
      },
      duration: 800,
      complete: function() {
        current_fs.hide();
        animating = false;
      },
      // this comes from the custom easing plugin
      easing: "easeInOutBack",
    }
  );
});


$(".submit").click(function () {
    return false;
})

$(document).ready(function () {
    function configureDataTable(tableId) {
        $(tableId).DataTable({
            "paging": true,
            "lengthMenu": [10, 25, 50, 100],
            "searching": true,
        });
    }

    // Bảng "Gói linh hoạt"
    configureDataTable('#dataTableFlexible');

    // Bảng "Gói cố định"
    configureDataTable('#dataTableFixed');

    // Bảng "Checked Gói linh hoạt"
    configureDataTable('#dataTableCheckedFlexible');

    // Bảng "Checked Gói cố định"
    configureDataTable('#dataTableCheckedFixed');
});

function previewImage(input) {
    if (input.files && input.files[0]) {
        var reader = new FileReader();

        reader.onload = function(e) {
            var img = document.querySelector('.show-service-img, .show-department-img');
            img.src = e.target.result;
        };

        reader.readAsDataURL(input.files[0]);
    }
}